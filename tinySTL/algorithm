#ifndef TINYSTL_ALGORITHM_H
#define TINYSTL_ALGORITHM_H

#include "iterator" //for iterator_traits, next
#include "pair.h"   //for pair, make_pair
#include "utility" // for move, swap

namespace tinySTL
{
	template <class InputIterator, class UnaryFunction >
	UnaryFunction for_each(InputIterator first, InputIterator last, UnaryFunction f)
	{
		for (; first != last; ++first)
		{
			f(*first);
		}
		return f;
	}

	template <class InputIterator, class T>
	typename iterator_traits<InputIterator>::difference_type
		count(InputIterator first, InputIterator last, const T& value)
	{
		typename iterator_traits<InputIterator>::difference_type res = 0;
		for (; first != last; ++first)
		{
			if (*first = valur)
			{
				++res;
			}
		}
		return res;
	}

	template <class InputIterator, class UnaryPredicate>
	typename iterator_traits<InputIterator>::difference_type 
		count_if(InputIterator first, InputIterator last, UnaryPredicate f)
	{
		typename iterator_traits<InputIterator>::difference_type res = 0;
		for (; first != last; ++first)
		{
			if (f(*first))
			{
				++res;
			}
		}
		return res;
	}

	template <class InputIterator1, class InputIterator2>
	tinySTL::pair<InputIterator1, InputIterator2>
		mismatch(InputIterator1 first1, InputIterator1 last1, InputIterator2 first2)
	{
		while (first1 != last1 && *first1 == *first2)
		{
			++first1;
			++first2;
		}
		return tinySTL::make_pair(first1, first2);
	}

	template <class InputIterator1, class InputIterator2, class BinaryPredicate>
	tinySTL::pair<InputIterator1, InputIterator2>
		mismatch(InputIterator1 first1, InputIterator1 last1, InputIterator2 first2, BinaryPredicate f)
	{
		while (first1 != last1 && f(*first1, *first2))
		{
			++first1;
			++first2;
		}
		return tinySTL::make_pair(first1, first2);
	}

	template <class InputIterator1, class InputIterator2>
	tinySTL::pair<InputIterator1, InputIterator2>
		mismatch(InputIterator1 first1, InputIterator1 last1, InputIterator2 first2, InputIterator2 last2)
	{
		while (first1 != last1 && first2 != last2 && *first1 == *first2)
		{
			++first1;
			++first2;
		}
		return tinySTL::make_pair(first1, first2);
	}

	template <class InputIterator1, class InputIterator2, class BinaryPredicate>
	tinySTL::pair<InputIterator1, InputIterator2>
		mismatch(InputIterator1 first1, InputIterator1 last1, InputIterator2 first2, InputIterator2 last2, BinaryPredicate f)
	{
		while (first1 != last1 &&first2 != last2 && f(*first1, *first2))
		{
			++first1;
			++first2;
		}
		return tinySTL::make_pair(first1, first2);
	}

	template <class InputIterator1, class InputIterator2>
	bool equal(InputIterator1 first1, InputIterator1 last1, InputIterator2 first2)
	{
		for (; first1 != last1; ++first1, ++first2) 
		{
			if (!(*first1 == *first2))
			{
				return false;
			}
		}
		return true;
	}

	template <class InputIterator1, class InputIterator2, class BinaryPredicate>
	bool equal(InputIterator1 first1, InputIterator1 last1, InputIterator2 first2, BinaryPredicate f)
	{
		for (; first1 != last1; ++first1, ++first2)
		{
			if (!f(*first1, *first2))
			{
				return false;
			}
		}
		return true;
	}

	template <class InputIterator, class T>
	InputIterator find(InputIterator first, InputIterator last, const T& value)
	{
		for (; first != last; ++first)
		{
			if (*first == value)
				return first;
		}
		return last;
	}

	template <class InputIterator, class UnaryPredicate>
	InputIterator find(InputIterator first, InputIterator last, UnaryPredicate f)
	{
		for (; first != last; ++first)
		{
			if (f(*first))
				return first;
		}
		return last;
	}

	template <class InputIterator, class UnaryPredicate>
	InputIterator find_if_not(InputIterator first, InputIterator last, UnaryPredicate)
	{
		for (; first != last; ++first)
		{
			if (!f(*first))
				return first;
		}
		return last;
	}

	template <class ForwardIterator1, class ForwardIterator2>
	ForwardIterator1 search(ForwardIterator1 first1, ForwardIterator1 last1, ForwardIterator2 first2, ForwardIterator2 last2)
	{
		while (true)
		{
			ForwardIterator1 temp1 = first1;
			for (ForwardIterator2 temp2 = first2; ;++temp1, ++temp2)
			{
				if (temp2 == last2)
					return first1; //find the answaer
				if (temp1 == last1)
					return last;
				if (!(*temp1 == *temp2))
					break;
			}
			++first1;
		}
	}

	template <class ForwardIterator1, class ForwardIterator2, class BinaryPredicate>
	ForwardIterator1 search(ForwardIterator1 first1, ForwardIterator1 last1, ForwardIterator2 first2, ForwardIterator2 last2, BinaryPredicate f)
	{
		while (true)
		{
			ForwardIterator1 temp1 = first1;
			for (ForwardIterator2 temp2 = first2; ;++temp1, ++temp2)
			{
				if (temp2 == last2)
					return first1; //find the answaer
				if (temp1 == last1)
					return last;
				if (!f(*temp1, *temp2))
					break;
			}
			++first1;
		}
	}

	template <class ForwardIterator1, class ForwardIterator2>
	ForwardIterator1 find_end(ForwardIterator1 first1, ForwardIterator1 last1, ForwardIterator2 first2, ForwardIterator2 last2)
	{
		if (first2 == last2)
			return last1;
		ForwardIterator1 res = last;
		while (true)
		{
			ForwardIterator1 temp = search(first1, last1, first2, last2);
			if (temp == last)
				return last;
			else
			{
				res = temp;
				first = res;
				++first;
			}
		}
		return res;
	}

	template <class ForwardIterator1, class ForwardIterator2, class BinaryPredicate>
	ForwardIterator1 find_end(ForwardIterator1 first1, ForwardIterator1 last1, ForwardIterator2 first2, ForwardIterator2 last2, BinaryPredicate f)
	{
		if (first2 == last2)
			return last1;
		ForwardIterator1 res = last;
		while (true)
		{
			ForwardIterator1 temp = search(first1, last1, first2, last2, f);
			if (temp == last)
				return last;
			else
			{
				res = temp;
				first = res;
				++first;
			}
		}
		return res;
	}


	template <class InputIterator, class ForwardIterator>
	InputIterator find_first_of(InputIterator first1, InputIterator last1, ForwardIterator first2, ForwardIterator last2)
	{
		for (; first1 != last1; ++first)
		{
			for (ForwardIterator it = first2; it != last2; ++it)
			{
				if (*first1 == *it)
					return first1;
			}
		}
		return last1;
	}

	template <class InputIterator, class ForwardIterator, class BinaryPredicate>
	InputIterator find_first_of(InputIterator first1, InputIterator last1, ForwardIterator first2, ForwardIterator last2, BinaryPredicate f)
	{
		for (; first1 != last1; ++first)
		{
			for (ForwardIterator it = first2; it != last2; ++it)
			{
				if (f(*first1, *it))
					return first1;
			}
		}
		return last1;
	}

	template<class ForwardIterator>
	ForwardIterator adjacent_find(ForwardIterator first, ForwardIterator last)
	{
		if (first == last)
			return last;
		ForwardIterator temp = first;
		++temp;
		for (; temp != last; ++temp)
		{
			if ((*temp == *first))
			{
				return first;
			}
		}
		return last;
	}

	template<class ForwardIterator, class BinaryPredicate>
	ForwardIterator adjacent_find(ForwardIterator first, ForwardIterator last, BinaryPredicate f)
	{
		if (first == last)
			return last;
		ForwardIterator temp = first;
		++temp;
		for (; temp != last; ++temp)
		{
			if (f(*temp, *first))
			{
				return first;
			}
		}
		return last;
	}



	template <class InputIterator, class OutputIterator>
	OutputIterator copy(InputIterator first1, InputIterator last1, OutputIterator first2)
	{
		for (; first1 != last1; ++first1, ++first2)
		{
			*first2 = *first1;
		}
		return first2;
	}

	template <class InputIterator, class OutputIterator, class UnaryPredicate>
	OutputIterator copy_if(InputIterator first1, InputIterator last1, OutputIterator first2, UnaryPredicate f)
	{
		for (; first1 != last1; ++first1)
		{
			if (f(*first1))
			{
				*first2 = *first1;
				++first2;
			}
		}
		return first2;
	}


	template <class InputIterator, class Size, class OutputIterator>
	OutputIterator copy_n(InputIterator first1, Size count, OutputIterator first2)
	{
		if (count <= 0)
			return first2;
		for (Size temp = 0; temp < count; ++temp)
		{
			*first2 = *first1;
			++first2;
			++first1;
		}
		return first2;
	}

	template <class BidirectionalIterator1, class BidirectionalIterator2>
	BidirectionalIterator2 copy_backward(BidirectionalIterator1 first1, BidirectionalIterator1 last1, BidirectionalIterator2 last2)
	{
		for (; first1 != last1;)
		{
			*(--last2) = *(--last1);
		}
		return last2;
	}



	template <class InputIterator,class OutputIterator>
	OutputIterator move(InputIterator first1, InputIterator last1, OutputIterator first2)
	{
		for (; first1 != last1; ++first1)
		{
			*first2 = tinySTL::move(*first1);
			++first2;
		}
		return first2;
	}

	template <class BidirectionalIterator1, class BidirectionalIterator2>
	BidirectionalIterator2 move_backward(BidirectionalIterator1 first1, BidirectionalIterator1 last1, BidirectionalIterator2 last2)
	{
		for (; first1 != last1;)
		{
			*(--last2) = tinySTL::move(*(--last1));
		}
		return last2;
	}

	template <class ForwardIterator, class T>
	void fill(ForwardIterator first1, ForwardIterator last1, const T& value)
	{
		for (; first1 != last1; ++first1)
		{
			*first1 = value;
		}
	}

	template <class OutputIterator, class Size, class T>
	OutputIterator fill(OutputIterator first1, Size count, const T& value)
	{
		for (Size i = 0; i < count; ++i)
		{
			*first1 = value;
		}
		return first1;
	}


	template <class InputIterator, class OutputIterator, class UnaryPredicate>
	OutputIterator transform(InputIterator first1, InputIterator last1, OutputIterator first2, UnaryPredicate f)
	{
		for (; first1 != last1; ++first1)
		{
			*first2 = f(*first1);
			++first2;
		}
		return first2;
	}


	template <class InputIterator1, class InputIterator2, class OutputIterator, class BinaryPredicate>
	OutputIterator transform(InputIterator1 first1, InputIterator1 last1, InputIterator2 first2, OutputIterator first3, BinaryPredicate f)
	{
		while (first1 != last1)
		{
			*first3++ = f(*first1++, *first2++);
		}
		return first3;
	}

	template <class ForwardIterator1, class ForwardIterator2>
	void iter_swap(ForwardIterator1 a, ForwardIterator2 b)
	{
		tinySTL::swap(*a, *b);
	}

	template<class BidirectionalIterator>
	void reverse(BidirectionalIterator first1, BidirectionalIterator last1)
	{
		while ((first1 != last1) && (first1 != --last1)) {
			iter_swap(first++, last);
		}
	}



	template <class ForwardIterator, class UnaryPredicate>
	ForwardIterator partition(ForwardIterator first1, ForwardIterator last1, UnaryPredicate f)
	{
		first1 = find_if_not(first, last, f);
		if (first1 == last1)
			return first1;
		for (auto it = next(first); it != last1; ++it)
		{
			if (f(*it))
			{
				iter_swap(it, first1);
				++first1;
			}
		}
		return first1;
	}

	template<class InputIterator, class T>
	T accumulate(InputIterator first, InputIterator last, T init)
	{
		for (; first != last; ++first)
		{
			init += *first;
		}
		return init;
	}

	template<class InputIterator, class T, class BinaryPredicate>
	T accumulate(InputIterator first, InputIterator last, T init,
		BinaryPredicate f)
	{
		for (; first != last; ++first)
		{
			init = f(init, *first);
		}
		return init;
	}

	template<class InputIterator, class OutputIterator>
	OutputIterator partial_sum(InputIterator first1, InputIterator last1, OutputIterator first2)
	{
		if (first1 == last1)
			return first2;
		auto sum = *first1++;
		*first2 = sum;
		for (; first1 != last1; ++first1)
		{
			sum += *first1;
			*++first2 = sum;
		}
		return ++first2;
	}


	template<class InputIterator, class OutputIterator, class BinaryPredicate>
	OutputIterator partial_sum(InputIterator first1, InputIterator last1,
		OutputIterator first2, BinaryPredicate f)
	{
		if (first1 == last1)
			return first2;
		auto sum = *first1++;
		*first2 = sum;
		for (; first1 != last1; ++first1)
		{
			sum = f(sum, *first1);
			*++first2 = sum;
		}
		return ++first2;
	}
}


#endif // !TINYSTL_ALGORITHM_H
