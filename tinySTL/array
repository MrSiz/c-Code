#ifndef TINYSTL_ARRAY_H
#define TINYSTL_ARRAY_H


#include <cstddef> //for size_t, ptrdiff_t
#include <stdexcept> //for exception out_of_range
#include "iterator" // for reverse_iterator


namespace tinySTL
{
	template<class T,size_t N>
	struct array
	{
	public:
		T arr[N];
	public:
		using value_type = T;
		using size_type  = size_t;
		using difference_type = ptrdiff_t;
		using reference = value_type&;
		using const_reference = const value_type&;
		using pointer = value_type*;
		using const_pointer = const value_type*;
		using iterator = T*; 
		using const_iterator = const T*;
		using reverse_iterator = tinySTL::reverse_iterator<iterator>;
		using const_reverse_iterator = tinySTL::reverse_iterator<const_iterator>;

	public:
		//member function
		constexpr reference at(size_type pos)
		{
			if (pos >= N)
			{
				throw std::out_of_range("error");
			}
			return arr[pos];
		}
		constexpr reference operator[](size_type pos)
		{
			return arr[pos];
		}
		constexpr reference front()
		{
			return arr[0];
		}
		constexpr reference back()
		{
			return arr[N - 1];
		}
		constexpr T* data()
		{
			return arr;
		}
		constexpr const_iterator cbegin() const
		{
			return static_cast<const_iterator>(data());
		}
		constexpr const_iterator begin() const
		{
			return static_cast<const_iterator>(data());
		}
		constexpr iterator begin()
		{
			return static_cast<iterator>(arr);
		}
		constexpr iterator end()
		{
			return static_cast<iterator>(arr + N);
		}
		constexpr const_iterator end() const
		{
			return static_cast<const_iterator>(data() + N);
		}
		constexpr bool empty()
		{
			return N == 0;
		}
		constexpr size_type size() const
		{
			return N;
		}
		constexpr size_type max_size() const
		{
			return N;
		}
		void fill(const T& value)
		{
			for (auto & val : arr)
			{
				val = value;
			}
		}
	};
}


#endif // !TINYSTL_ARRAY_H
