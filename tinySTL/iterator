#ifndef TINYSTL_ITERATOR_H
#define TINYSTL_ITERATOR_H

#include <cstddef>	//for ptrdiff_t

namespace tinySTL
{
	//define iterator_tag in order to differentiate iterator
	struct input_iterator_tag { };
	struct output_iterator_tag { };
	struct forward_iterator_tag : public input_iterator_tag { };
	struct bidirectional_iterator_tag : public forward_iterator_tag { };
	struct random_access_iterator_tag : public bidirectional_iterator_tag { };

	//define five defferent kinds of iterators
	template <class T, class Distance>
	struct input_iterator
	{
		typedef input_iterator_tag	iterator_category;
		typedef T					value_type;
		typedef Distance			different_type;
		typedef T*					pointer;
		typedef T&					reference;
	};

	struct output_iterator
	{
		typedef output_iterator_tag	iterator_category;
		typedef void				value_type;
		typedef void				different_type;
		typedef void				pointer;
		typedef void				reference;
	};

	template <class T, class Distance>
	struct forward_iterator
	{
		typedef forward_iterator_tag	iterator_category;
		typedef T						value_type;
		typedef Distance				different_type;
		typedef T*						pointer;
		typedef T&						reference;
	};

	template <class T, class Distance>
	struct bidirectional_iterator
	{
		typedef bidirectional_iterator_tag	iterator_category;
		typedef T							value_type;
		typedef Distance					different_type;
		typedef T*							pointer;
		typedef T&							reference;
	};

	template <class T, class Distance>
	struct random_access_iterator
	{
		typedef	random_access_iterator_tag	iterator_category;
		typedef T							value_type;
		typedef Distance					different_type;
		typedef T*							pointer;
		typedef T&							reference;
	};

	//define iterator_traits
	template <class Iterator>
	struct iterator_traits
	{
		typedef typename Iterator::difference_type		difference_type;
		typedef typename Iterator::value_type			value_type;
		typedef typename Iterator::pointer				pointer;
		typedef typename Iterator::reference			reference;
		typedef typename Iterator::iterator_category	iterator_category;
	};

	template <class T>
	struct iterator_traits<T*>
	{
		typedef ptrdiff_t							difference_type;
		typedef T									value_type;
		typedef T*									pointer;
		typedef T&									reference;
		typedef tinySTL::random_access_iterator_tag	iterator_category;
	};

	template <class T>
	struct iterator_traits<const T*>
	{
		typedef ptrdiff_t							difference_type;
		typedef T									value_type;
		typedef const T*							pointer;
		typedef const T&							reference;
		typedef tinySTL::random_access_iterator_tag	iterator_category;
	};


	//User defined iterator can inherit this class
	template
		<
		class Category,
		class T,
		class Distance = ptrdiff_t,
		class Pointer = T*,
		class Reference = T&
		>
		struct iterator
	{
		typedef Category				iterator_category;
		typedef T					    value_type;
		typedef Distance				difference_type;
		typedef Pointer					pointer;
		typedef Reference				reference;
	};

	//Get the iterator type
	template <class Iterator>
	typename iterator_traits<Iterator>::iterator_category 
		_iterator_category(const Iterator &)
	{
		typedef typename iterator_traits<Iterator>::iterator_category temp_iterator_category;
		return temp_iterator_category();
	}

	//Get the iterator value type
	template <class Iterator>
	inline typename iterator_traits<Iterator>::value_type*
		_value_type(const Iterator &)
	{
		return static_cast<typename iterator_traits<Iterator>::value_type*>(0);
	}

	//Get the iterator distance type
	template <class Iterator>
	inline typename iterator_traits<Iterator>::difference_type*
		_distance_type(const Iterator &)
	{
		return static_cast<typename iterator_traits<Iterator>::value_type*>(0);
	}

	//define advance and distance functions
	//accorging to different kinds of iterators
	template <class InputIterator, class Distance>
	inline void _advance(InputIterator it, Distance n, input_iterator_tag)
	{
		while (n--)
			++it;
	}

	template <class BidirectionalIterator, class Distance>
	inline void _advance(BidirectionalIterator it, Distance n, bidirectional_iterator_tag)
	{
		if (n >= 0)
		{
			while (n--)
				++it;
		}
		else
		{
			while (n++)
				--it;
		}
	}

	template <class RandomAccessIterator, class Distance>
	inline void _advance(RandomAccessIterator it, Distance n, random_access_iterator_tag)
	{
		it += n;
	}

	template <class Iterator, class Distance>
	inline void advance(Iterator& i, Distance n)
	{
		_advance(i, n, _iterator_category(i));
	}

	template <class InputIterator>
	inline typename iterator_traits<InputIterator>::difference_type
		_distance(InputIterator first, InputIterator last, input_iterator_tag)
	{
		typename iterator_traits<InputIterator>::difference_type n = 0;
		for (; first != last; ++first)
			++n;
		return n;
	}

	template <class RandomAccessIterator>
	inline typename iterator_traits<RandomAccessIterator>::difference_type
		_distance(RandomAccessIterator first, RandomAccessIterator last, random_access_iterator_tag)
	{
		return last - first;
	}

	template <class Iterator>
	inline typename iterator_traits<Iterator>::difference_type
		distance(Iterator first, Iterator last)
	{
		typedef typename iterator_traits<Iterator>::iterator_category category;
		return _distance(first, last, category());
	}

	//define different kinds of iterator adapter
	template <class Iterator>
	class reverse_iterator : public tinySTL::iterator<
		typename tinySTL::iterator_traits<Iterator>::iterator_category,
		typename tinySTL::iterator_traits<Iterator>::value_type,
		typename tinySTL::iterator_traits<Iterator>::difference_type,
		typename tinySTL::iterator_traits<Iterator>::pointer,
		typename tinySTL::iterator_traits<Iterator>::reference >
	{
	public:
		typedef	typename tinySTL::iterator_traits<Iterator>::value_type				value_type;
		typedef	typename tinySTL::iterator_traits<Iterator>::difference_type		difference_type;
		typedef	typename tinySTL::iterator_traits<Iterator>::pointer				pointer;
		typedef typename tinySTL::iterator_traits<Iterator>::reference				reference;
		typedef typename tinySTL::iterator_traits<Iterator>::iterator_category		iterator_category;

		typedef Iterator	iterator_type;
	protected:
		Iterator current;
	public:
		reverse_iterator() {}
		explicit reverse_iterator(Iterator x) : current(x) {}
		template< class U >
		reverse_iterator(const reverse_iterator<U>& other) : current(other.base()) {}
	public:
		template< class U >
		reverse_iterator& operator=(const reverse_iterator<U>& other)
		{
			current = other.base();
			return *this;
		}
		Iterator base() const
		{
			return current;
		}
		reference operator*() const
		{
			Iterator previous = current;
			return *--previous;
		}
		pointer operator->() const
		{
			return &(operator*());
		}
		reference operator[](difference_type n) const
		{
			return *(*this + n);
		}
	public:
		reverse_iterator& operator++()
		{
			--current;
			return *this;
		}
		reverse_iterator& operator--()
		{
			++current;
			return *this;
		}
		reverse_iterator operator++(int)
		{
			reverse_iterator temp = *this;
			--current;
			return temp;
		}
		reverse_iterator operator--(int)
		{
			reverse_iterator temp = *this;
			++current;
			return temp;
		}
		reverse_iterator operator+(difference_type n) const
		{
			return reverse_iterator(current - n);
		}
		reverse_iterator operator-(difference_type n) const
		{
			return reverse_iterator(current + n);
		}
		reverse_iterator& operator+=(difference_type n)
		{
			current -= n;
			return *this;
		}
		reverse_iterator& operator-=(difference_type n)
		{
			current += n;
			return *this;
		}
	};

	template< class Container >
	class back_insert_iterator : public tinySTL::iterator<tinySTL::output_iterator_tag,
		void, void, void, void >
	{
	public:
		typedef Container				  container_type;
		typedef void					  value_type;
		typedef void					  difference_type;
		typedef void					  pointer;
		typedef void					  reference;
		typedef tinySTL::output_iterator_tag iterator_category;
	protected:
		Container* container;
	public:
		explicit back_insert_iterator(Container& c) : container(&c) {}
	public:
		back_insert_iterator<Container>&
			operator=(typename Container::const_reference value)
		{
			container->push_back(value);
			return *this;
		}
		back_insert_iterator& operator*()
		{
			return *this;
		}
		back_insert_iterator& operator++()
		{
			return *this;
		}
		back_insert_iterator& operator++(int)
		{
			return *this;
		}
	};


	template <class Container>
	tinySTL::back_insert_iterator<Container> back_inserter(Container& c)
	{
		return tinySTL::back_insert_iterator<Container>(c);
	}



	template< class Container >
	class front_insert_iterator : public tinySTL::iterator< tinySTL::output_iterator_tag,
		void, void, void, void >
	{	
	public:
		typedef void							value_type;
		typedef void							difference_type;
		typedef void							pointer;
		typedef void							reference;
		typedef tinySTL::output_iterator_tag	iterator_category;

		typedef Container	container_type;
	protected:
		Container* container;
	public:
		explicit front_insert_iterator(Container& c) : container(&c) {}
		front_insert_iterator<Container>&
		operator=(typename Container::const_reference value)
		{
			container->push_front(value);
			return *this;
		}
		front_insert_iterator& operator*()
		{
			return *this;
		}
		front_insert_iterator& operator++()
		{
			return *this;
		}
		front_insert_iterator& operator++(int)
		{
			return *this;
		}
	};

	template< class Container >
	tinySTL::front_insert_iterator<Container> front_inserter(Container& c)
	{
		return tinySTL::front_insert_iterator<Container>(c);
	}

	template <class Container >
	class insert_iterator : public tinySTL::iterator< tinySTL::output_iterator_tag,
		void, void, void, void >
	{
	public:
		typedef void						 value_type;
		typedef void						 difference_type;
		typedef void						 pointer;
		typedef void 						 reference;
		typedef tinySTL::output_iterator_tag iterator_category;

		typedef Container container_type;
	protected:
		Container* container;
		typename Container::iterator iter;
	public:
		explicit insert_iterator(Container& c, typename Container::iterator i) : container(&c), iter(i) {}
	public:
		insert_iterator<Container>&
			operator=(typename Container::const_reference value)
		{
			iter = container->insert(iter, value);
			++iter;
			return *this;
		}
		insert_iterator& operator*()
		{
			return *this;
		}
		insert_iterator& operator++()
		{
			return *this;
		}
		insert_iterator& operator++(int)
		{
			return *this;
		}
	};

	template <class Container>
	tinySTL::insert_iterator<Container> inserter(Container& c, typename Container::iterator i)
	{
		return tinySTL::insert_iterator<Container>(c, i);
	}

	template <class ForwardIterator>
	ForwardIterator next(ForwardIterator it, typename tinySTL::iterator_traits<ForwardIterator>::difference_type n = 1)
	{
		tinySTL::advance(it, n);
		return it;
	}
	

	template<class BidirectionalIterator>
	BidirectionalIterator prev(BidirectionalIterator it, typename tinySTL::iterator_traits<BidirectionalIterator>::difference_type n = 1)
	{
		advance(it, -n);
		return it;
	}
}

#endif // !
