#ifndef TINYSTL_UTILITY_H
#define TINYSTL_UTILITY_H

#include "type_traits" //for remove_reference
#include "pair.h"

namespace tinySTL
{
	namespace rel_ops
	{
		template <class T>
		bool operator!=(const T& lhs, const T& rhs)
		{
			return !(lhs == rhs);
		}

		template <class T>
		bool operator>(const T& lhs, const T& rhs)
		{
			return rhs < lhs;
		}

		template <class T>
		bool operator<=(const T& lhs, const T& rhs)
		{
			return !(lhs < rhs);
		}

		template <class T>
		bool operator>=(const T& lhs, const T& rhs)
		{
			return !(lhs < rhs);
		}
	}

	template <class T>
	void swap(T& a, T& b)
	{
		T temp = b;
		b = a;
		a = temp;
	}
	//there can be some specilizations for swap

	//forward lvalue
	template <class T>
	constexpr T&& forward(typename tinySTL::remove_reference<T>::type& t) noexcept
	{
		return static_cast<T&&>(t);
	}

	//forward rvalue
	template <class T>
	constexpr T&& forward(typename tinySTL::remove_reference<T>::type&& t) noexcept
	{
		return static_cast<T&&>(t);
	}

	template< class T >
	typename tinySTL::remove_reference<T>::type&& move(T&& t)
	{
		return static_cast<typename tinySTL::remove_reference<T>::type&&>(t);
	}

}

#endif // !TINYSTL_UTILITY_H

