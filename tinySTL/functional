#ifndef TINYSTL_FUNCTIONAL_H
#define TINYSTL_FUNCTIONAL_H

namespace tinySTL
{
	template <typename ArgumentType, typename ResultType>
	struct unary_function
	{
		typedef ArgumentType argument_type;
		typedef ResultType result_type;
	};

	template <class Arg1, class Arg2, class Result> 
	struct binary_function
	{
		typedef Arg1 first_argument_type;
		typedef Arg2 second_argument_type;
		typedef Result result_type;
	};



	template <class T>
	struct plus : public binary_function<T, T, T>
	{
		constexpr T operator()(const T &lhs, const T &rhs) const
		{
			return lhs + rhs;
		}
	};

	template <class T>
	struct minus : public binary_function<T, T, T>
	{
		constexpr T operator()(const T &lhs, const T &rhs) const
		{
			return lhs - rhs;
		}
	};

	template <class T>
	struct multiplies : public binary_function<T, T, T>
	{
		constexpr T operator()(const T &lhs, const T &rhs) const
		{
			return lhs * rhs;
		}
	};

	template <class T>
	struct divides : public binary_function<T, T, T>
	{
		constexpr T operator()(const T &lhs, const T &rhs) const
		{
			return lhs / rhs;
		}
	};

	template <class T>
	struct modulus : public binary_function<T, T, T>
	{
		constexpr T operator()(const T &lhs, const T &rhs) const
		{
			return lhs % rhs;
		}
	};

	template <class T>
	struct negate : public binary_function<T, T, T>
	{
		constexpr T operator()(const T &arg) const
		{
			return -arg;
		}
	};

	template <class T>
	struct equal_to : public binary_function<T, T, bool>
	{
		constexpr bool operator()(const T &lhs, const T &rhs) const
		{
			return lhs == rhs;
		}
	};

	template <class T>
	struct not_equal_to : public binary_function<T, T, bool>
	{
		constexpr bool operator()(const T &lhs, const T &rhs) const
		{
			return lhs != rhs;
		}
	};

	template <class T>
	struct greater : public binary_function<T, T, bool>
	{
		constexpr bool operator()(const T &lhs, const T &rhs) const
		{
			return lhs > rhs;
		}
	};

	template <class T>
	struct less : public binary_function<T, T, bool>
	{
		constexpr bool operator()(const T &lhs, const T &rhs) const
		{
			return lhs < rhs;
		}
	};

	template <class T>
	struct greater_equal : public binary_function<T, T, bool>
	{
		constexpr bool operator()(const T &lhs, const T &rhs) const
		{
			return lhs >= rhs;
		}
	};

	template <class T>
	struct less_equal : public binary_function<T, T, bool>
	{
		constexpr bool operator()(const T &lhs, const T &rhs) const
		{
			return lhs <= rhs;
		}
	};

	template <class T>
	struct logical_and : public binary_function<T, T, bool>
	{
		constexpr bool operator()(const T &lhs, const T &rhs) const
		{
			return lhs && rhs;
		};
	};

	template <class T>
	struct logical_or : public binary_function<T, T, bool>
	{
		constexpr bool operator()(const T &lhs, const T &rhs) const
		{
			return lhs || rhs;
		}
	};

	template <class T>
	struct logical_not : public binary_function<T, T, bool>
	{
		const bool operator()(const T &arg) const
		{
			return !arg;
		}
	};

	template< class T >
	struct bit_and : public binary_function<T, T, T>
	{
		constexpr T operator()(const T &lhs, const T &rhs) const
		{
			return lhs & rhs;
		}
	};

	template< class T >
	struct bit_or : public binary_function<T, T, T>
	{
		constexpr T operator()(const T &lhs, const T &rhs) const
		{
			return lhs | rhs;
		}
	};

	template <class T>
	struct bit_xor : public binary_function<T, T, T>
	{
		constexpr T operator()(const T &lhs, const T &rhs) const
		{
			return lhs ^ rhs;
		}
	};

}


#endif // !TINYSTL_FUNCTIONAL_H
