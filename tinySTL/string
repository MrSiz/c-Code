#ifndef TINYSTL_STRING_H
#define TINYSTL_STRING_H
#include <cstddef> // for size_t

namespace tinySTL
{
	template <typename T>
	class string{
	public:
		using value_type 		= char;
		using size_type 		= size_t;
		using difference_type 	= ptrdiff_t;
		using reference 		= value_type&;
		using const_reference 	= const value_type&;
		using pointer 			= char*;
		using const_pointer 	= const char*;
		using iterator 			= char*;
		using const_iterator 	= const char*;
		
	public:
		string();
		string(size_type count, const char ch);
		~string();
		
		string& operator=(const string&);
		string& operator=(char ch);
		string& operator=(const char*);
		
		string& assign(size_type count, char ch);
		string& assign(const string& );
		string& assign(const char*);
		
	public:
		reference 		at(size_type p);
		const_reference at(size_type p) const;
		reference       operator[]( size_type p);
		const_reference operator[]( size_type p) const;
		
		void 	clear();
		void 	push_back(char ch);
		void 	pop_back();
		int 	compare(const string&);
		int 	compare(const char*);
		string& replace(size_type, size_type, const string&);
		void 	resize(size_type count);
		void 	resize(size_type count, CharT ch);
		size_type find(const char* s, size_type pos = 0) const;
		size_type find(CharT ch, size_type pos = 0) const;
	};
}

#endif
