#ifndef TINYSTL_VECTOR_H
#define TINYSTL_VECTOR_H

#include <cstddef> //for size_t,ptrdiff_t
#include <exception> //for exception
#include <new> //for placement new

#include "allocator.h" //for allocator
#include "iterator" //for related iterator, distance, iterator_traits
#include "memory" //for uninitialize_fill_n, uninitialized_copy
#include "type_traits"// for true_type, false_type, is_integral
#include "algorithm" //for copy

namespace tinySTL
{
	template<class T,class Allocator = tinySTL::allocator<T>>
	class vector
	{
	public:
		typedef T									 value_type;
		typedef Allocator							 allocator_type;
		typedef size_t								 size_type;
		typedef ptrdiff_t							 difference_type;
		typedef T&									 reference;
		typedef const T&							 const_reference;
		typedef typename Allocator::pointer			 pointer;
		typedef typename Allocator::const_pointer	 const_pointer;
		typedef T*									 iterator;
		typedef const T*							 const_iterator;
		typedef tinySTL::reverse_iterator<iterator>  reverse_iterator;
		typedef tinySTL::reverse_iterator<const_iterator> const_reverse_iterator;
	private:
		T* start;
		T* finish;
		T* endstore;
		allocator_type data_allocator;
	public:
		explicit vector(const Allocator& alloc = Allocator())
			: data_allocator(alloc), start(nullptr), finish(nullptr), endstore(nullptr) {}
		vector(size_type count, const T& value, const Allocator& alloc = Allocator())
			: data_allocator(alloc)
		{
			start = data_allocator.allocate(count);
			endstore = start + count;
			finish = tinySTL::uninitialized_fill_n(start, count, value);
		}
		explicit vector(size_type count)
			: data_allocator(allocator_type())
		{
			start = data_allocator.allocate(count);
			endstore = start + count;
			finish = tinySTL::uninitialized_fill_n(start, count, T());
		}
		vector(const vector& other)
			: data_allocator(other.get_allocator())
		{
			start = data_allocator.allocate(other.size());
			endstore = start + other.size();
			finish = tinySTL::uninitialized_copy(other.begin(), other.end(), start);
		}
		template <class InputIterator>
		vector(InputIterator first, InputIterator last, const Allocator& alloc = Allocator())
			:data_allocator(alloc)
		{
			typedef typename tinySTL::is_integral<InputIterator>::type Integral;
			M_initialize_aux(first, last, Integral());
		}
		~vector()
		{
			tinySTL::destroy(start, finish);
			M_deallocate(start, endstore - start);
		}
	private:
		template <class Integer>
		void M_initialize_aux(Integer n, Integer value, tinySTL::true_type)
		{
			start = data_allocator.allocate(count);
			endstore = start + count;
			finish = tinySTL::uninitialized_fill_n(start, count, value);
		}

		template <class InputIterator>
		void M_initialize_aux(InputIterator first, InputIterator last, tinySTL::false_type)
		{
			typedef typename iterator_traits<InputIterator>::iterator_category category;
			M_range_initialize(first, last, category());
		}

		template <class InputIterator>
		void M_range_initialize(InputIterator first, InputIterator last, tinySTL::input_iterator_tag)
		{
			for (; first != last; ++first)
			{
				push_back(*first);
			}
		}

		template <class ForwardIterator>
		void M_range_initialzize(ForwardIterator first, ForwardIterator last, tinySTL::forward_iterator_tag)
		{
			size_type count = tinySTL::distance(first, last);
			start = data_allocator.allocate(count);
			endstore = start + count;
			finish = tinySTL::uninitialized_copy(other.begin(), other.end(), start);
		}
		iterator M_allocate(size_type count)
		{
			return data_allocator.allocate(count);
		}
		void M_deallocate(iterator ptr, size_type count)
		{
			if (ptr)
				data_allocator.deallocate(ptr, count);
		}
		template <class ForwardIterator>
		iterator M_allocate_and_copy(size_type count, ForwardIterator first, ForwardIterator last)
		{
			iterator temp = M_allocate(count);
			uninitialized_copy(first, last, temp);
			return temp;
		}
		void M_fill_assign(size_type count, const T& val)
		{
			if (count > capacity())
			{
				vector<T, Allocator> temp(count, val);
				temp.swap(*this);
			}
			else if (count > size())
			{
				fill(begin(), end(), val);
				finish = tinySTL::uninitialized_fill_n(finish, count - size(), val);
			}
			else
			{
				erase(fill_n(begin(), n - size(), val), end());
			}
		}
		template <class Integer>
		void M_assign_another(Integer count, Integer val, tinySTL::true_type)
		{
			M_fill_assign(count, val);
		}
		template <class InputIterator>
		void M_assign_another(InputIterator first, InputIterator last, tinySTL::false_type)
		{
			typedef typename tinySTL::iterator_traits<InputIterator>::iterator_category category;
			M_assign_aux(first, last, category());
		}
		template <class InputIterator>
		void M_assign_aux(InputIterator first, InputIterator last, tinySTL::input_iterator_tag)
		{
			iterator temp = begin();
			for (; first != last && temp != end(); ++first, ++temp)
			{
				*temp = *first;
			}
			if (first == last)
				erase(temp, end());
			else
				insert(end(), first, last);
		}
		template <class ForwardIterator>
		void M_assign_aux(ForwardIterator first, ForwardIterator last, tinySTL::forward_iterator_tag)
		{
			size_type len = distance(first, last);
			if (len > capacity())
			{
				iterator temp = M_allocate_and_copy(len, first, last);
				destroy(start, finish);
				M_deallocate(start, endstore - start);
				start = temp;
				endstore = finish = start + len;
			}
			else if (size() >= len)
			{
				iterator temp = copy(first, last, start);
				destroy(temp, finish);
				finish = temp;
			}
			else
			{
				ForwardIterator m = first;
				tinySTL::advance(m, size());
				copy(first, m, start);
				finish = uninitialized_copy(m, last, finish);
			}
		}

		void M_insert_aux(iterator pos, const T& value = T())
		{
			if (finish != endstore)
			{
				new(finish)T(*(finish - 1));
				++finish;
				tinySTL::copy_backward(pos, finish - 2, finish - 1);
				*pos = value;
			}
			else
			{
				const size_type old_size = size();
				size_type temp;
				if (old_size == 0)
				{
					temp = 1;
				}
				else
				{
					temp = old_size * 2;
				}
				const size_type new_size = temp;
				iterator new_start = M_allocate(new_size);
				iterator new_finish = new_start;
				new_finish = tinySTL::uninitialized_copy(start, pos, new_start);
				++new_finish;
				new_finish = tinySTL::uninitialized_copy(pos, finish, new_finish);
				tinySTL::destroy(start, finish);
				M_deallocate(start, endstore - start);
				start = new_start;
				finish = new_finish;
				endstore = new_start + new_size;
			}
		}
		template <class InputIterator>
		void M_range_insert(iterator pos, InputIterator first, InputIterator last, tinySTL::input_iterator_tag)
		{
			for (; first != last; ++first)
			{
				pos = insert(pos, *first);
				++pos;
			}
		}
		template <class ForwardIterator>
		void M_range_insert(iterator pos, ForwardIterator first, ForwardIterator last, tinySTL::forward_iterator_tag)
		{
			if (first != last)
			{
				size_type count = tinySTL::distance(first, last);
				if (endstore - finish >= count)
				{
					const size_type ele_after = finish - pos;
					iterator old_finish = finish;
					// [pos, finish] > count
					if (ele_after > count)
					{
						tinySTL::uninitialized_copy(finish - count, finish, finish);
						finish += count;
						tinySTL::copy_backward(pos, old_finish - count, old_finish);
						tinySTL::copy(first, last, pos);
					}
					else//[pos, finish] < count
					{
						ForwardIterator temp = first;
						advance(temp, ele_after);
						tinySTL::uninitialized_copy(temp, last, finish);
						finish += count - ele_after;
						tinySTL::uninitialized_copy(pos, old_finish, finish);
						finish += ele_after;
						tinySTL::copy(first, temp, pos);
					}
				}
				else
				{
					const size_type old_size = size();
					const size_type new_size = old_size + (old_size > count ? old_size : count);
					iterator new_start = M_allocate(new_size);
					iterator new_finish = new_start;
					new_finish = tinySTL::uninitialized_copy(start, pos, new_start);
					new_finish = tinySTL::uninitialized_copy(first, last, new_finish);
					new_finish = tinySTL::uninitialized_copy(pos, finish, new_finish);
					tinySTL::destroy(start, finish);
					M_deallocate(start, endstore - start);
					start = new_start;
					finish = new_finish;
					endstore = start + new_size;
				}
			}
		}
	public:
		vector& operator=(const vector& other);
		void assign(size_type count, const T& val)
		{
			M_fill_assign(count, val);
		}
		template <class InputIterator>
		void assign(InputIterator first, InputIterator last)
		{
			typedef is_integral<InputIterator>::type Integral;
			M_assign_another(first, last, Integral());
		}
		allocator_type get_allocator() const
		{
			return data_allocator;
		}
		reference at(size_type pos)
		{
			if (!(pos < size()))
			{
				throw std::out_of_range;
			}
			return *this[pos];
		}
		const_reference at(size_type pos) const
		{
			if (!(pos < size()))
			{
				throw std::out_of_range;
			}
			return *this[pos];
		}
		reference operator[](size_type pos)
		{
			return *(begin() + pos);
		}
		const_reference operator[](size_type pos) const
		{
			return *(begin() + pos);
		}
		reference front()
		{
			return *(begin());
		}
		const_reference front() const
		{
			return *(begin());
		}
		reference back()
		{
			iterator temp = end();
			--temp;
			return *temp;
		}
		const_reference back() const
		{
			iterator temp = end();
			--temp;
			return *temp;
		}
		iterator begin()
		{
			return start;
		}
		const_iterator begin() const
		{
			return start;
		}
		const_iterator cbegin() const
		{
			return start;
		}
		iterator end()
		{
			return finish;
		}
		iterator end() const
		{
			return finish;
		}
		iterator cend() const
		{
			return finish;
		}
		reverse_iterator rbegin()
		{
			return reverse_iterator(end());
		}
		const_reverse_iterator rbegin() const
		{
			return reverse_iterator(end());
		}
		const_reverse_iterator crbegin() const
		{
			return reverse_iterator(end());
		}
		reverse_iterator rend()
		{
			return reverse_iterator(begin());
		}
		const_reverse_iterator rend() const
		{
			return reverse_iterator(begin());
		}
		const_reverse_iterator crend()
		{
			return reverse_iterator(begin());
		}
		bool empty() const
		{
			return begin() == end();
		}
		size_type size() const
		{
			return tinySTL::distance(begin(), end());
		}
		size_type max_size() const
		{
			return size_type(-1) / sizeof(T);
		}
		size_type capacity() const
		{
			return distance(begin(), endstore);
		}
		void reserve(size_type new_cap)
		{
			if (capacity() < new_cap)
			{
				const size_type old_length = size();
				iterator temp = M_allocate_and_copy(new_cap, start, finish);
				destroy(start, finish);
				M_deallocate(start, endstore - start);
				start = temp;
				finish = start + old_length;
				endstore = start + new_cap;
			}
		}
		void clear()
		{
			erase(begin(), end());
		}
		iterator insert(iterator pos, const T& value = T())
		{
			size_type count = pos - start;
			if (finish != endstore && pos == finish)
			{
				new(finish)T(value);
				++finish;
			}
			else
			{
				M_insert_aux(pos, value);
			}
			return start + count;
		}
		template< class InputIterator >
		void insert(iterator pos, InputIterator first, InputIterator last)
		{
			typedef typename tinySTL::iterator_traits<InputIterator>::iterator_category category;
			M_insert_aux(pos, first, last, category());
		}
		iterator erase(iterator pos)
		{
			if (pos + 1 != end())
			{
				tinySTL::copy(pos + 1, finish, pos)
			}
			--finish;
			tinySTL::destroy_at(finish);
			return pos;
		}

		iterator erase(iterator first, iterator last)
		{
			iterator temp = tinySTL::copy(last, finish, first);
			tinySTL::destroy(temp, finish);
			finish = finish - (last - first);
			return first;
		}

		void push_back(const T& value)
		{
			if (finish != endstore)
			{
				new(finish) T(value);
				++finish;
			}
			else
			{
				M_insert_aux(finish, value);
			}
		}

		void push_back()
		{
			if (finish != endstore)
			{
				new(finish)T();
				++finish;
			}
			else
			{
				M_insert_aux(finish);
			}
		}

		void pop_back()
		{
			--finish;
			tinySTL::destroy_at(finish);
		}

		void resize(size_type count, const value_type& value)
		{
			if (count <= size())
			{
				erase(begin() + count, end());
			}
			else
			{
				insert(end(), count - size(), value);
			}
		}

		void resize(size_type count)
		{
			resize(count, T());
		}
		void clear()
		{
			erase(begin(), end());
		}
	};

	template <class T, class Allocator>
	vector<T, Allocator>& vector<T, Allocator>::operator=(const vector<T, Allocator>& other)
	{
		if (this != &other)
		{
			const size_type oth_length = other.size();
			if (oth_length > this->capacity())
			{
				iterator temp = M_allocate_and_copy(oth_length, other.begin(), other.end());
				tinySTL::destroy(start, finish);
				M_deallocate(start, endstore - start);
				start = temp;
				endstore = start + oth_length;
			}
			else if (this->size() >= oth_length)
			{
				iterator temp = tinySTL::copy(other.begin(), other.end(), this->begin());
				tinySTL::destroy(temp, finish);
			}
			else
			{
				copy(other.begin(), other.begin() + this->size(), start);
				uninitialized_copy_n(other.begin() + this->size(), other.end(), finish);
			}
			finish = start + oth_length;
		}
		return *this;
	}
}

#endif